class MAUD extends DataView {
   static byteLength = 12

   constructor(data, offset = 0, length = 12) {
      super(data ?? new ArrayBuffer(offset + length), offset, length)
   }
   set tag(value) {
      const j = new Uint8Array(ArrayBuffer.fromString(value));
      const byteLength = j.byteLength;
      if (byteLength > 2)
         throw new Error("too long");
      for (let i = 0; i < byteLength; i++)
         this.setUint8(0 + i, j[i]);
      for (let i = byteLength; i < 2; i++)
         this.setUint8(0 + i, 0);
   }
   set version(value) {
      this.setInt8(2, value);
   }
   set bitsPerSample(value) {
      this.setInt8(3, value);
   }
   set sampleRate(value) {
      this.setUint16(4, value, true);
   }
   set numChannels(value) {
      this.setInt8(6, value);
   }
   set sampleFormat(value) {
      this.setInt8(7, value);
   }
   set bufferSamples(value) {
      this.setUint32(8, value, true);
   }
}

const SampleFormat = Object.freeze({
   Uncompressed: 0,
   IMA: 1,
   SBC: 2,
   Tone: 3,
   Silence: 4,
});


export { MAUD, SampleFormat };

/*
	View classes generated by https://phoddie.github.io/compileDataView on Thu Sep 22 2022 13:32:09 GMT-0700 (Pacific Daylight Time) from the following description:
*/

// #pragma get(false)
// #pragma outputByteLength(true)
// struct MAUD {
//    char tag[2];
//    int8_t version;
//    int8_t bitsPerSample;
//    uint16_t sampleRate;
//    int8_t numChannels;
//    int8_t sampleFormat;
//    uint32_t bufferSamples;
// };
// 
// enum SampleFormat {
// 	Uncompressed = 0,
// 	IMA = 1,
// 	SBC = 2,
// 	Tone = 3,
// 	Silence = 4
// };
// 
// 
